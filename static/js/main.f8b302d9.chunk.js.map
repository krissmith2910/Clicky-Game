{"version":3,"sources":["components/Header.js","components/Wrapper.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","total","status","Wrapper","children","Card","alt","name","src","image","id","onClick","cardsuffle","App","state","character","score","highscore","message","clicked","setState","sort","Math","random","this","map","key","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f8b302d9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nconst Header = props => (\r\n  <div className=\"scoreBoard\">\r\n    <h3 className=\"header\">Your Score: {props.total}</h3>\r\n    <h3 className=\"status\">{props.status}</h3>\r\n  </div>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\n\r\nconst Card = props => (\r\n  <div className=\"card img-container hover\">\r\n    <img alt={props.name} src={props.image} id={props.id}\r\n      onClick={() => props.cardsuffle(props.id)} className='shuffleScore' />\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from 'react';\nimport Header from './components/Header';\nimport Wrapper from './components/Wrapper';\nimport Card from './components/Card';\nimport character from \"./character.json\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n\n  state = {\n    character,\n    score: 0,\n    highscore: 10,\n    message: \"Click on Images to begin the game!\"\n  }\n\n  cardsuffle = (id) => {\n    if (this.state.character[id - 1].clicked) {\n      this.setState({\n        message: \"wrong guess, Try again!\",\n\n      });\n      // count score\n    } else {\n      this.setState({\n        score: this.setState.score += 1,\n        message: \"Right guess!\",\n\n        character: this.state.character.sort(() => Math.random() - 0.5)\n      });\n    }\n    // count highscore\n    if (this.state.highscore < this.state.score) {\n      this.setState({\n        highscore: this.state.score\n      })\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header total={this.state.score} status={this.state.message} className=\"App-header\">\n          <h1 className=\"App-title\">The Clicky Game!</h1>\n          <p className=\"App-intro\">\n            Click on Images to play the GAME!!!\n          </p>\n        </Header>\n        <div>\n    \n        {/* <highscore\n          total=\n          goal=\n          status=\n        /> */}\n        </div>\n        <Wrapper>\n          {this.state.character.map(character => (\n            <Card\n              cardsuffle={this.cardsuffle}\n              id={character.id}\n              key={character.id}\n              image={character.image}\n            />\n          ))}\n        </Wrapper>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.register();\n"],"sourceRoot":""}